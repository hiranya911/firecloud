# Copyright 2020 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Stage Release

on:
  # Only run the workflow when a PR is updated or when a developer explicitly requests
  # a build by sending a 'firebase_build' event.
  pull_request:
    types: [opened, synchronize]

  repository_dispatch:
    types:
      - firebase_build

jobs:
  stage_release:
    # To stage a release without publishing it, send a 'firebase_build' event or apply
    # the 'release:stage' label to a PR.
    if: github.event.action == 'firebase_build' ||
      contains(github.event.pull_request.labels.*.name, 'release:stage')

    runs-on: ubuntu-latest

    # When manually triggering the build, the requester can specify a target branch or a tag
    # via the 'ref' client parameter.
    steps:
    - name: Checkout source for staging
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.client_payload.ref || github.ref }}

    - name: Install dependencies
      run: |
        echo Installing dependencies
        echo Triggered by ${{ github.event.action }}
        echo Reviews ${{github.event.pull_request.reviews.*.body}}

    - name: Run unit tests
      run: |
        echo Running tests

    - name: Package release artifacts
      id: artifacts
      run: |
        mkdir -p dist
        echo Hello World > dist/output.txt
        echo ::set-output name=status::true

    # Attach the packaged artifacts to the workflow output. These can be manually
    # downloaded for later inspection if necessary.
    - name: Archive artifacts
      uses: actions/upload-artifact@v1
      with:
        name: dist
        path: dist

    - name: Update PR status
      if: always()
      run: ./.github/scripts/update_pull_request.sh
      env:
        STAGING_SUCCESSFUL: ${{ steps.artifacts.outputs.status }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
